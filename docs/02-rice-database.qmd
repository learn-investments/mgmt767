---
title:  "Rice Database"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
---

## Sharadar Equities Bundle

- [Nasdaq Data Link / Sharadar Core US Equities Bundle](https://data.nasdaq.com/databases/SFA/data)
- Data is in a SQL database hosted on a Rice server.
- To access the server, you must be on the Rice network or the Rice VPN.  
- To connect to the VPN see [this](https://oit.rice.edu/services/network-connectivity#:~:text=Connect%20to%20the%20VPN,to%20download%20the%20necessary%20software).

# SQL {background-color="#657b83" color="#fdf6e3"}

## Connect to the SQL server in python

. . .

```{.p code-line-numbers="1-3|5-9|11"}
import pandas as pd
import pymssql
from sqlalchemy import create_engine

server = 'fs.rice.edu'
database = 'stocks'
username = 'stocks'
password = '6LAZH1'
string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database 

conn = create_engine(string).connect()
```

## SQL queries

. . .

```{.p code-line-numbers="1-7|1,2,4,7"}
SELECT column_name(s)
FROM table_name
JOIN table_name ON column_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);
```

- SQL is not case sensitive except when filtering on values.  Pass the value (as a string) as it is in the database.
- Example: where ticker='AAPL'

# Explore database {background-color="#657b83" color="#fdf6e3"}

## Tables in the database

. . .

```{.p}
df = pd.read_sql(
    "select * from information_schema.tables",
    conn
)
df
```

. . .

```{python}
import pandas as pd
import pymssql
from sqlalchemy import create_engine

server = 'fs.rice.edu'
database = 'stocks'
username = 'stocks'
password = '6LAZH1'

string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database 
conn = create_engine(string).connect()

df = pd.read_sql(
    "select * from information_schema.tables",
    conn
)
df
```

## Variable definitions

. . .

```.p
df = pd.read_sql(
    "select * from indicators",
    conn
)
df.to_excel("indicators.xlsx")
```

```{python}
df = pd.read_sql(
    "select * from indicators",
    conn
)
df.to_excel("indicators.xlsx")
```


## All annual reports for a single company

- ARY = as reported yearly (no restatements included)
- datekey = date of report, reportperiod = end of fiscal period

. . .

```.p
df = pd.read_sql(
    """
    select * from sf1 
    where ticker='AAPL' and dimension='ARY'
    order by reportperiod
    """, 
    conn
)
df
```

. . .

```{python}
df = pd.read_sql(
    """
    select * from sf1 
    where ticker='AAPL' and dimension='ARY'
    order by reportperiod
    """, 
    conn
)
df
```

## Quarterly reports for multiple companies 

. . .

```.p
df = pd.read_sql(
    """
    select * from sf1 
    where ticker in ('AAPL', 'CVX') and dimension='ARQ' and reportperiod>='2020-01-01'
    order by ticker, reportperiod
    """, 
    conn
)
df
```

. . .

```{python}
df = pd.read_sql(
    """
    select * from sf1 
    where ticker in ('AAPL', 'CVX') and dimension='ARQ' and reportperiod>='2020-01-01'
    order by ticker, reportperiod
    """, 
    conn
)
df
```

## All data for a single ticker from SEP

- Prices (open, high, low, close, volume) are in SEP
- Marketcap and some ratios are in DAILY

. . .

```.p
df = pd.read_sql(
    """
    select * from sep where ticker='AAPL' 
    order by date
    """,
    conn
)
df
```

. . .

```{python}
df = pd.read_sql(
    """
    select * from sep where ticker='AAPL' 
    order by date
    """,
    conn
)
df
```


## All data for a single ticker from DAILY


. . .

```.p
df = pd.read_sql(
    """
    select * from daily where ticker='AAPL' 
    order by date
    """,
    conn
)
df
```

. . .

```{python}
df = pd.read_sql(
    """
    select * from daily where ticker='AAPL' 
    order by date
    """,
    conn
)
df
```

