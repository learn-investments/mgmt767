---
title:  "Trading at Alpaca"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back and Kevin Crotty</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
---

## Create alpaca account

- After logging into Alpaca at [https://alpaca.markets](https://alpaca.markets), you DO NOT need to enter name, address, etc. - that is only for real trading accounts.  
- By clicking `Home` on the left toolbar, you should get to the screen on the following slide. 
- Click on `View API Keys`, then `Generate New Keys` to see your key and your secret key.  Copy and save them somewhere.

##

![](alpaca1.png)

## Install alpaca-py

- The module alpaca-trade-api is deprecated.  Install alpaca-py instead. 
- The docs are at [https://docs.alpaca.markets/docs/getting-started-with-trading-api](https://docs.alpaca.markets/docs/getting-started-with-trading-api).    

## Connect to alpaca

```{.p code-line-numbers="1-3|5-6|8"}
from alpaca.trading.client import TradingClient
from alpaca.trading.requests import MarketOrderRequest
from alpaca.trading.enums import OrderSide, TimeInForce

KEY = "your_key"
SECRET_KEY = "your_secret_key"

trading_client = TradingClient(KEY, SECRET_KEY, paper=True)
```

```{python}
from alpaca.trading.client import TradingClient
from alpaca.trading.requests import MarketOrderRequest
from alpaca.trading.enums import OrderSide, TimeInForce

KEY = "PKXDK3VJZBL7PRXS3F28"
SECRET_KEY = "bwho7ZbVcQKIaYgYcLI67c0Sibxj3ckOmnxmwjNv"

trading_client = TradingClient(KEY, SECRET_KEY, paper=True)
```



## Check your account
. . .

```.p
account = trading_client.get_account()
account
```


```{python}
account = trading_client.get_account()
account
```

## Check buying power and account balance
. . .

```.p
print(f'Available buying power:\t${float(account.buying_power):,.2f}')
print(f'Portfolio value:\t\t${float(account.portfolio_value):,.2f}')
```


```{python}
print(f'Available buying power:\t${float(account.buying_power):,.2f}')
print(f'Portfolio value:\t\t${float(account.portfolio_value):,.2f}')
```


## Asset Information
. . .

```.p
asset_info = trading_client.get_asset('SPY')
asset_info
```

```{python}
asset_info = trading_client.get_asset('SPY')
asset_info
```

## Current Quotes
. . .

```{.p code-line-numbers="1-2|3-6"}
from alpaca.data import StockHistoricalDataClient
from alpaca.data.requests import StockLatestQuoteRequest
data_client = StockHistoricalDataClient(KEY, SECRET_KEY)
params = StockLatestQuoteRequest(symbol_or_symbols=['SPY'])
quotes = data_client.get_stock_latest_quote(params)
quotes
```

```{python}
from alpaca.data import StockHistoricalDataClient
from alpaca.data.requests import StockLatestQuoteRequest

data_client = StockHistoricalDataClient(KEY, SECRET_KEY)
params = StockLatestQuoteRequest(symbol_or_symbols=['SPY'])
quotes = data_client.get_stock_latest_quote(params)
quotes
```



## Buy SPY

. . .

```{.p code-line-numbers="1-6|7"}
order = MarketOrderRequest(
    symbol="SPY",
    qty=10,
    side=OrderSide.BUY,
    time_in_force=TimeInForce.DAY
    )
_ = trading_client.submit_order(order)
```

## Short AAPL

. . .

```{.p code-line-numbers="1-6|7"}
order = MarketOrderRequest(
    symbol="AAPL",
    qty=5,
    side=OrderSide.SELL,
    time_in_force=TimeInForce.DAY
    )
_ = trading_client.submit_order(order)
```


## Check your positions

. . .

```.p
positions = trading_client.get_all_positions()
for p in positions:
    print("{} shares of {}".format(p.qty, p.symbol))
```

. . .

```{python}
positions = trading_client.get_all_positions()
for p in positions:
    print("{} shares of {}".format(p.qty, p.symbol))
```


. . .

```.p
account = trading_client.get_account()
print(f'Cash Balance: ${float(account.cash):,.2f}')
```

. . . 

```{python}
account = trading_client.get_account()
print(f'Cash Balance: ${float(account.cash):,.2f}')
```


